:NewDefs

:js
16 / (2 / 2)
//│ Num
//│ // Prelude
//│ let res;
//│ class TypingUnit {}
//│ const typing_unit = new TypingUnit;
//│ // Query 1
//│ res = 16 / (2 / 2);
//│ // End of generated code
//│ res
//│     = 16

:js
1 - (3 - 5)
//│ Int
//│ // Prelude
//│ class TypingUnit1 {}
//│ const typing_unit1 = new TypingUnit1;
//│ // Query 1
//│ res = 1 - (3 - 5);
//│ // End of generated code
//│ res
//│     = 3

fun (--) minusminus(a, b) = a - b
//│ fun (--) minusminus: (Int, Int) -> Int

:js
1 -- (3 -- 5)
//│ Int
//│ // Prelude
//│ class TypingUnit3 {}
//│ const typing_unit3 = new TypingUnit3;
//│ // Query 1
//│ res = minusminus(1, minusminus(3, 5));
//│ // End of generated code
//│ res
//│     = 3

fun (-+-) complex(a, b) = a - 2*b
//│ fun (-+-) complex: (Int, Int) -> Int

:p
:ducs
:js
1 -+- (3 -+- 5)
//│ |1| |-+-| |(|3| |-+-| |5|)|
//│ AST: TypingUnit(App(Var(-+-), Tup(_: IntLit(1), _: Bra(rcd = false, App(Var(-+-), Tup(_: IntLit(3), _: IntLit(5)))))))
//│ Parsed: -+-(1, '(' -+-(3, 5,) ')',);
//│ 0. Typing ‹-+-(1, '(' -+-(3, 5,) ')',)›
//│ | Typing unit statements
//│ | | 0. Typing term -+-(1, '(' -+-(3, 5,) ')',)
//│ | | | 0. Typing term -+-
//│ | | | 0. : ‹∀ 0. ((α53', α54',) -> α56')›
//│ | | | 0. Typing term 1
//│ | | | 0. : #1<Int,Num,Object>
//│ | | | 0. Typing term '(' -+-(3, 5,) ')'
//│ | | | | 0. Typing term -+-(3, 5,)
//│ | | | | | 0. Typing term -+-
//│ | | | | | 0. : ‹∀ 0. ((α53', α54',) -> α56')›
//│ | | | | | 0. Typing term 3
//│ | | | | | 0. : #3<Int,Num,Object>
//│ | | | | | 0. Typing term 5
//│ | | | | | 0. : #5<Int,Num,Object>
//│ | | | | | CONSTRAIN ‹∀ 0. ((α53', α54',) -> α56')› <! ((#3<Int,Num,Object>, #5<Int,Num,Object>,) -> α61)
//│ | | | | |   where 
//│ 		α53' <: Int
//│ 		α54' <: Int
//│ 		α56' :> Int
//│ | | | | | 0. C ‹∀ 0. ((α53', α54',) -> α56')› <! ((#3<Int,Num,Object>, #5<Int,Num,Object>,) -> α61)    (0)
//│ | | | | | | could be distribbed: Set(α56')
//│ | | | | | | cannot be distribbed: Set(α53', α54')
//│ | | | | | | inner: ‹∀ 0. α56'›
//│ | | | | | | raised: ((α53', α54',) -> ‹∀ 1. α56_62''›)
//│ | | | | | |   where: 
//│ 		α53' <: Int
//│ 		α54' <: Int
//│ 		α56_62'' :> Int
//│ | | | | | | DISTRIB-L'  ~>  ‹∀ 0. ((α53', α54',) -> ‹∀ 1. α56_62''›)›
//│ | | | | | | 0. C ‹∀ 0. ((α53', α54',) -> ‹∀ 1. α56_62''›)› <! ((#3<Int,Num,Object>, #5<Int,Num,Object>,) -> α61)    (2)
//│ | | | | | | | could be distribbed: Set()
//│ | | | | | | | INST [0]   ‹∀ 0. ((α53', α54',) -> ‹∀ 1. α56_62''›)›
//│ | | | | | | |   where  
//│ 		α53' <: Int
//│ 		α54' <: Int
//│ 		α56_62'' :> Int
//│ | | | | | | | TO [0] ~>  ((α53_63, α54_64,) -> ‹∀ 1. α56_62''›)
//│ | | | | | | |   where  
//│ 		α56_62'' :> Int
//│ 		α53_63 <: Int
//│ 		α54_64 <: Int
//│ | | | | | | | 0. C ((α53_63, α54_64,) -> ‹∀ 1. α56_62''›) <! ((#3<Int,Num,Object>, #5<Int,Num,Object>,) -> α61)    (5)
//│ | | | | | | | | 0. C (#3<Int,Num,Object>, #5<Int,Num,Object>,) <! (α53_63, α54_64,)    (3)
//│ | | | | | | | | | 0. C #3<Int,Num,Object> <! α53_63    (4)
//│ | | | | | | | | | | NEW α53_63 LB (0)
//│ | | | | | | | | | | 0. C #3<Int,Num,Object> <! Int    (7)
//│ | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | 0. C #5<Int,Num,Object> <! α54_64    (4)
//│ | | | | | | | | | | NEW α54_64 LB (0)
//│ | | | | | | | | | | 0. C #5<Int,Num,Object> <! Int    (7)
//│ | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | 0. C ‹∀ 1. α56_62''› <! α61    (3)
//│ | | | | | | | | | NEW α61 LB (0)
//│ | | | | 0. : α61
//│ | | | 0. : α61
//│ | | | CONSTRAIN ‹∀ 0. ((α53', α54',) -> α56')› <! ((#1<Int,Num,Object>, α61,) -> α65)
//│ | | |   where 
//│ 		α53' <: Int
//│ 		α54' <: Int
//│ 		α56' :> Int
//│ 		α61 :> ‹∀ 1. α56_62''›
//│ 		α56_62'' :> Int
//│ | | | 0. C ‹∀ 0. ((α53', α54',) -> α56')› <! ((#1<Int,Num,Object>, α61,) -> α65)    (0)
//│ | | | | could be distribbed: Set(α56')
//│ | | | | cannot be distribbed: Set(α53', α54')
//│ | | | | inner: ‹∀ 0. α56'›
//│ | | | | raised: ((α53', α54',) -> ‹∀ 1. α56_66''›)
//│ | | | |   where: 
//│ 		α53' <: Int
//│ 		α54' <: Int
//│ 		α56_66'' :> Int
//│ | | | | DISTRIB-L'  ~>  ‹∀ 0. ((α53', α54',) -> ‹∀ 1. α56_66''›)›
//│ | | | | 0. C ‹∀ 0. ((α53', α54',) -> ‹∀ 1. α56_66''›)› <! ((#1<Int,Num,Object>, α61,) -> α65)    (2)
//│ | | | | | could be distribbed: Set()
//│ | | | | | INST [0]   ‹∀ 0. ((α53', α54',) -> ‹∀ 1. α56_66''›)›
//│ | | | | |   where  
//│ 		α53' <: Int
//│ 		α54' <: Int
//│ 		α56_66'' :> Int
//│ | | | | | TO [0] ~>  ((α53_67, α54_68,) -> ‹∀ 1. α56_66''›)
//│ | | | | |   where  
//│ 		α56_66'' :> Int
//│ 		α53_67 <: Int
//│ 		α54_68 <: Int
//│ | | | | | 0. C ((α53_67, α54_68,) -> ‹∀ 1. α56_66''›) <! ((#1<Int,Num,Object>, α61,) -> α65)    (5)
//│ | | | | | | 0. C (#1<Int,Num,Object>, α61,) <! (α53_67, α54_68,)    (3)
//│ | | | | | | | 0. C #1<Int,Num,Object> <! α53_67    (4)
//│ | | | | | | | | NEW α53_67 LB (0)
//│ | | | | | | | | 0. C #1<Int,Num,Object> <! Int    (7)
//│ | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | 0. C α61 <! α54_68    (4)
//│ | | | | | | | | NEW α61 UB (0)
//│ | | | | | | | | 0. C ‹∀ 1. α56_62''› <! α54_68    (7)
//│ | | | | | | | | | NEW α54_68 LB (0)
//│ | | | | | | | | | 0. C ‹∀ 1. α56_62''› <! Int    (10)
//│ | | | | | | | | | | 0. C ‹∀ 1. α56_62''› <! Int    (10)
//│ | | | | | | | | | | | 0. C ‹∀ 1. α56_62''› <! Int    (10)
//│ | | | | | | | | | | | | 0. C ‹∀ 1. α56_62''› <! Int    (10)
//│ | | | | | | | | | | | | | 0. C ‹∀ 1. α56_62''› <! #Int<Object,Num>    (12)
//│ | | | | | | | | | | | | | | INST [1]   ‹∀ 1. α56_62''›
//│ | | | | | | | | | | | | | |   where  
//│ 		α56_62'' :> Int
//│ | | | | | | | | | | | | | | TO [0] ~>  α56_69
//│ | | | | | | | | | | | | | |   where  
//│ 		α56_69 :> Int
//│ | | | | | | | | | | | | | | 0. C α56_69 <! #Int<Object,Num>    (14)
//│ | | | | | | | | | | | | | | | NEW α56_69 UB (0)
//│ | | | | | | | | | | | | | | | 0. C Int <! #Int<Object,Num>    (17)
//│ | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | 0. C ‹∀ 1. α56_66''› <! α65    (3)
//│ | | | | | | | NEW α65 LB (0)
//│ | | 0. : α65
//│ | : Some(α65)
//│ ======== TYPED ========
//│ res: Some(α65) where 
//│ 		α65 :> ‹∀ 1. α56_66''›
//│ 		α56_66'' :> Int
//│ Int
//│ // Prelude
//│ class TypingUnit5 {}
//│ const typing_unit5 = new TypingUnit5;
//│ // Query 1
//│ res = complex(1, complex(3, 5));
//│ // End of generated code
//│ res
//│     = 15
