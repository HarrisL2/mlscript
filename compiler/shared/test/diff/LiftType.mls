:NewDefs
:ParseOnly

class CTX{
  class A {}
  fun foo(f: A => A): (A => A) => A = f(new A)
}
//│ |#class| |CTX|{|→|#class| |A| |{||}|↵|#fun| |foo|(|f|#:| |A| |#=>| |A|)|#:| |(|A| |#=>| |A|)| |#=>| |A| |#=| |f|(|#new| |A|)|←|↵|}|
//│ Parsed: {class CTX {class A {}; fun foo = (f: (A,) => A,) => f(new A([]) {},) : (A -> A) -> A}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, CTX, (), Tup(), (), None, None, TypingUnit(NuTypeDef(class, A, (), Tup(), (), None, None, TypingUnit()), NuFunDef(None, foo, None, [], Lam(Tup(f: Lam(Tup(_: Var(A)), Var(A))), Asc(App(Var(f), Tup(_: New(Some((TypeName(A),[])), TypingUnit()))), Function(Tuple(List((None,Field(None,Function(Tuple(List((None,Field(None,TypeName(A))))),TypeName(A)))))),TypeName(A))))))))
//│ Lifted:
//│ TypingUnit(NuTypeDef(class, CTX$1_A$2, (), Tup(_: Var(par$CTX$1)), (), None, None, TypingUnit()), NuTypeDef(class, CTX$1, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(f: Lam(Tup(_: Var(CTX$1_A$2)), Var(CTX$1_A$2))), Asc(App(Var(f), Tup(_: New(Some((TypeName(CTX$1_A$2),[this,])), TypingUnit()))), Function(Tuple(List((None,Field(None,Function(Tuple(List((None,Field(None,TypeName(CTX$1_A$2))))),TypeName(CTX$1_A$2)))))),TypeName(CTX$1_A$2))))))))
//│ 

class CTX(x, y){
  class A{ fun foo = x}
  class B: A { fun foo = y}
  fun foo(any: [A, B]): [B, A] = [any._2, any._1]
}
//│ |#class| |CTX|(|x|,| |y|)|{|→|#class| |A|{| |#fun| |foo| |#=| |x|}|↵|#class| |B|#:| |A| |{| |#fun| |foo| |#=| |y|}|↵|#fun| |foo|(|any|#:| |[|A|,| |B|]|)|#:| |[|B|,| |A|]| |#=| |[|any|._2|,| |any|._1|]|←|↵|}|
//│ Parsed: {class CTX(x, y,) {class A {fun foo = x}; class B: A {fun foo = y}; fun foo = (any: [A, B,],) => [(any)._2, (any)._1,] : [B, A]}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, CTX, (), Tup(_: Var(x), _: Var(y)), (), None, None, TypingUnit(NuTypeDef(class, A, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Var(x)))), NuTypeDef(class, B, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Var(y)))), NuFunDef(None, foo, None, [], Lam(Tup(any: Tup(_: Var(A), _: Var(B))), Asc(Tup(_: Sel(Var(any), _2), _: Sel(Var(any), _1)), Tuple(List((None,Field(None,TypeName(B))), (None,Field(None,TypeName(A)))))))))))
//│ Lifted:
//│ TypingUnit(NuTypeDef(class, CTX$1_A$2, (), Tup(_: Var(par$CTX$1)), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(), Sel(Sel(Var(this), par$CTX$1), x))))), NuTypeDef(class, CTX$1_B$3, (), Tup(_: Var(par$CTX$1)), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(), Sel(Sel(Var(this), par$CTX$1), y))))), NuTypeDef(class, CTX$1, (), Tup(_: Var(x), _: Var(y)), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(any: Tup(_: Var(CTX$1_A$2), _: Var(CTX$1_B$3))), Asc(Tup(_: Sel(Var(any), _2), _: Sel(Var(any), _1)), Tuple(List((None,Field(None,TypeName(CTX$1_B$3))), (None,Field(None,TypeName(CTX$1_A$2)))))))))))
//│ 

class CTX(x, y){
  class A{ fun foo = x}
  class B: A { fun foo = y}
  fun foo(any: {p1: A, p2: B}): [B, A] = [any.p2, any.p1]
}
//│ |#class| |CTX|(|x|,| |y|)|{|→|#class| |A|{| |#fun| |foo| |#=| |x|}|↵|#class| |B|#:| |A| |{| |#fun| |foo| |#=| |y|}|↵|#fun| |foo|(|any|#:| |{|p1|#:| |A|,| |p2|#:| |B|}|)|#:| |[|B|,| |A|]| |#=| |[|any|.p2|,| |any|.p1|]|←|↵|}|
//│ Parsed: {class CTX(x, y,) {class A {fun foo = x}; class B: A {fun foo = y}; fun foo = (any: '{' {p1: A, p2: B} '}',) => [(any).p2, (any).p1,] : [B, A]}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, CTX, (), Tup(_: Var(x), _: Var(y)), (), None, None, TypingUnit(NuTypeDef(class, A, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Var(x)))), NuTypeDef(class, B, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Var(y)))), NuFunDef(None, foo, None, [], Lam(Tup(any: Bra(rcd = true, Rcd(Var(p1) = Var(A), Var(p2) = Var(B)))), Asc(Tup(_: Sel(Var(any), p2), _: Sel(Var(any), p1)), Tuple(List((None,Field(None,TypeName(B))), (None,Field(None,TypeName(A)))))))))))
//│ Lifted:
//│ TypingUnit(NuTypeDef(class, CTX$1_A$2, (), Tup(_: Var(par$CTX$1)), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(), Sel(Sel(Var(this), par$CTX$1), x))))), NuTypeDef(class, CTX$1_B$3, (), Tup(_: Var(par$CTX$1)), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(), Sel(Sel(Var(this), par$CTX$1), y))))), NuTypeDef(class, CTX$1, (), Tup(_: Var(x), _: Var(y)), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(any: Bra(rcd = true, Rcd(Var(p1) = Var(CTX$1_A$2), Var(p2) = Var(CTX$1_B$3)))), Asc(Tup(_: Sel(Var(any), p2), _: Sel(Var(any), p1)), Tuple(List((None,Field(None,TypeName(CTX$1_B$3))), (None,Field(None,TypeName(CTX$1_A$2)))))))))))
//│ 

class CTX(x, y){
  class A{ fun foo = x}
  class B<T> { fun foo = y}
  fun foo(any: [A, B<A>]): [[B<A>, A], A] = [any, any._1]
}
//│ |#class| |CTX|(|x|,| |y|)|{|→|#class| |A|{| |#fun| |foo| |#=| |x|}|↵|#class| |B|‹|T|›| |{| |#fun| |foo| |#=| |y|}|↵|#fun| |foo|(|any|#:| |[|A|,| |B|‹|A|›|]|)|#:| |[|[|B|‹|A|›|,| |A|]|,| |A|]| |#=| |[|any|,| |any|._1|]|←|↵|}|
//│ Parsed: {class CTX(x, y,) {class A {fun foo = x}; class B‹T› {fun foo = y}; fun foo = (any: [A, B‹A›,],) => [any, (any)._1,] : [[B[A], A], A]}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, CTX, (), Tup(_: Var(x), _: Var(y)), (), None, None, TypingUnit(NuTypeDef(class, A, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Var(x)))), NuTypeDef(class, B, ((None,TypeName(T))), Tup(), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Var(y)))), NuFunDef(None, foo, None, [], Lam(Tup(any: Tup(_: Var(A), _: TyApp(Var(B), List(TypeName(A))))), Asc(Tup(_: Var(any), _: Sel(Var(any), _1)), Tuple(List((None,Field(None,Tuple(List((None,Field(None,AppliedType(TypeName(B),List(TypeName(A))))), (None,Field(None,TypeName(A))))))), (None,Field(None,TypeName(A)))))))))))
//│ Lifted:
//│ TypingUnit(NuTypeDef(class, CTX$1_A$2, (), Tup(_: Var(par$CTX$1)), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(), Sel(Sel(Var(this), par$CTX$1), x))))), NuTypeDef(class, CTX$1_B$3, ((None,TypeName(T))), Tup(_: Var(par$CTX$1)), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(), Sel(Sel(Var(this), par$CTX$1), y))))), NuTypeDef(class, CTX$1, (), Tup(_: Var(x), _: Var(y)), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(any: Tup(_: Var(CTX$1_A$2), _: TyApp(Var(CTX$1_B$3), List(TypeName(CTX$1_A$2))))), Asc(Tup(_: Var(any), _: Sel(Var(any), _1)), Tuple(List((None,Field(None,Tuple(List((None,Field(None,AppliedType(TypeName(CTX$1_B$3),List(TypeName(CTX$1_A$2))))), (None,Field(None,TypeName(CTX$1_A$2))))))), (None,Field(None,TypeName(CTX$1_A$2)))))))))))
//│ 

class CTX{
  fun ctx(x,y) = 
    class A{ fun foo = x }
    fun bar<T>(any: T): A = 
      let x = new T
      new A
    (new CTX).bar<CTX>
}
//│ |#class| |CTX|{|→|#fun| |ctx|(|x|,|y|)| |#=| |→|#class| |A|{| |#fun| |foo| |#=| |x| |}|↵|#fun| |bar|‹|T|›|(|any|#:| |T|)|#:| |A| |#=| |→|#let| |x| |#=| |#new| |T|↵|#new| |A|←|↵|(|#new| |CTX|)|.bar|‹|CTX|›|←|←|↵|}|
//│ Parsed: {class CTX {fun ctx = (x, y,) => {class A {fun foo = x}; fun bar = (any: T,) => {let x = new T([]) {}; new A([]) {}} : A; ('(' new CTX([]) {} ')').bar‹CTX›}}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, CTX, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, ctx, None, [], Lam(Tup(_: Var(x), _: Var(y)), Blk(NuTypeDef(class, A, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Var(x)))); NuFunDef(None, bar, None, [TypeName(T)], Lam(Tup(any: Var(T)), Asc(Blk(NuFunDef(Some(false), x, None, [], New(Some((TypeName(T),[])), TypingUnit())); New(Some((TypeName(A),[])), TypingUnit())), TypeName(A)))); TyApp(Sel(Bra(rcd = false, New(Some((TypeName(CTX),[])), TypingUnit())), bar), List(TypeName(CTX)))))))))
//│ Lifted:
//│ Lifting failed: mlscript.codegen.CodeGenError: Cannot find type T. Class values are not supported in lifter. 
//│ 

