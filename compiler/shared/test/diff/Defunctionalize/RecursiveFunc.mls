:NewDefs

:mono
fun fac(n) = 
  if (n > 1) then fac(n - 1) * n else 1
fac(5)
//│ Lifted:
//│ TypingUnit {
//│   fun fac$1 = (n,) => {if ('(' >(n, 1,) ')') then *(fac$1(-(n, 1,),), n,) else 1}
//│   Code(List(fac$1(5,)))
//│ }
//│ Mono:
//│ TypingUnit {
//│   fun fac$1 = (n,) => {if ('(' >(n, 1,) ')') then *(fac$1(-(n, 1,),), n,) else 1}
//│   fun main$$1 = () => fac$1(5,)
//│   Code(List(main$$1()))
//│ }
//│ fun fac$1: Int -> Int
//│ fun main$$1: () -> Int
//│ Int
//│ res
//│     = 120

:e // FIXME: Strange syntax
:mono
class List(val l: List | Nil | undefined, val hasTail: Bool)  {}
class Nil(val l: List | Nil | undefined, val hasTail: Bool)  {}
fun count(lst) =
  if lst.hasTail then
    let l = lst.l
    if l is undefined then 1 else count(l)+1
  else 0
count(new List(new List(new Nil(undefined, false), true), true))
//│ Lifted:
//│ TypingUnit {
//│   class List$1([val l: |(|(List$1, Nil$2,), undefined,), val hasTail: Bool,]) {}
//│   class Nil$2([val l: |(|(List$1, Nil$2,), undefined,), val hasTail: Bool,]) {}
//│   let l$2 = (lst).l
//│   fun count$1 = (lst,) => {if ((lst).hasTail) then {if (is(l$2, undefined,)) then 1 else +(count$1(l$2,), 1,)} else 0}
//│   Code(List(count$1((new List$1)((new List$1)((new Nil$2)(undefined, false,), true,), true,),)))
//│ }
//│ Mono:
//│ Variable lst not found during evaluation
//│ mlscript.compiler.mono.Monomorph.findVar(Monomorph.scala:203)
//│ mlscript.compiler.mono.Specializer.evaluate$$anonfun$1(Specializer.scala:30)
//│ scala.collection.immutable.Map$EmptyMap$.getOrElse(Map.scala:228)
//│ mlscript.compiler.mono.Specializer.evaluate(Specializer.scala:30)
//│ mlscript.compiler.mono.Specializer.evaluate(Specializer.scala:62)
//│ mlscript.compiler.mono.Monomorph.updateFunc(Monomorph.scala:161)
//│ mlscript.compiler.mono.Monomorph.getFuncRetVal(Monomorph.scala:130)
//│ mlscript.compiler.mono.Monomorph.findVar(Monomorph.scala:197)
//│ mlscript.compiler.mono.Specializer.evaluate$$anonfun$1(Specializer.scala:30)
//│ scala.collection.immutable.Map$Map1.getOrElse(Map.scala:250)
//│ ╔══[ERROR] Post-process failed to produce AST.
//│ ╙──
//│ 
