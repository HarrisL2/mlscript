:NewDefs

//:sd
:p
:nolift
val a = {
    number: true
}
if a.number then 5 else 6
//│ |#val| |a| |#=| |{|→|number|#:| |true|←|↵|}|↵|#if| |a|.number| |#then| |5| |#else| |6|
//│ AST: TypingUnit(List(NuFunDef(Some(false),Var(a),None,List(),Left(Bra(true,Rcd(List((Var(number),Fld(_,Var(true)))))))), If(IfThen(Sel(Var(a),Var(number)),IntLit(5)),Some(IntLit(6)))))
//│ Lifted:
//│ TypingUnit(List(NuFunDef(Some(false),Var(a),None,List(),Left(Bra(true,Rcd(List((Var(number),Fld(_,Var(true)))))))), If(IfThen(Sel(Var(a),Var(number)),IntLit(5)),Some(IntLit(6)))))
//│ TypingUnit {
//│   let a = '{' {number: true} '}'
//│   Code(List(if ((a).number) then 5 else 6))
//│ }
//│ Parsed: let a = '{' {number: true} '}'; if ((a).number) then 5 else 6;
//│ val a: {number: true}
//│ 5 | 6
//│ a
//│   = { number: true }
//│ res
//│     = 5


//:sd
//:dsd
:nolift
:p
class X() {
    val inner = 6
}
val b = X()
b.inner
//│ |#class| |X|(||)| |{|→|#val| |inner| |#=| |6|←|↵|}|↵|#val| |b| |#=| |X|(||)|↵|b|.inner|
//│ AST: TypingUnit(List(NuTypeDef(Cls,TypeName(X),List(),Some(Tup(List())),None,None,List(),None,None,TypingUnit(List(NuFunDef(Some(false),Var(inner),None,List(),Left(IntLit(6)))))), NuFunDef(Some(false),Var(b),None,List(),Left(App(Var(X),Tup(List())))), Sel(Var(b),Var(inner))))
//│ Lifted:
//│ TypingUnit(List(NuTypeDef(Cls,TypeName(X),List(),Some(Tup(List())),None,None,List(),None,None,TypingUnit(List(NuFunDef(Some(false),Var(inner),None,List(),Left(IntLit(6)))))), NuFunDef(Some(false),Var(b),None,List(),Left(App(Var(X),Tup(List())))), Sel(Var(b),Var(inner))))
//│ TypingUnit {
//│   class X([]) {let inner = 6}
//│   let b = X()
//│   Code(List((b).inner))
//│ }
//│ Parsed: class X() {let inner = 6}; let b = X(); (b).inner;
//│ class X() {
//│   val inner: 6
//│ }
//│ val b: X
//│ 6
//│ b
//│   = X {}
//│ res
//│     = 6
