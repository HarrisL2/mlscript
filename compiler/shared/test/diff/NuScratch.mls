:NewDefs

:pd
:nolift
:p
let id(y) = y
//│ |#let| |id|(|y|)| |#=| |y|
//│ AST: TypingUnit(List(NuFunDef(Some(false),Var(id),None,List(),Left(Lam(Tup(List((None,Fld(_,Var(y))))),Var(y))))))
//│ TypingUnit(List(NuFunDef(Some(false),Var(id),None,List(),Left(Lam(Tup(List((None,Fld(_,Var(y))))),Var(y))))))
//│ 
//│ Polydef:
//│ HashMap(Tup(List((None,Fld(_,Var(y))))) -> 2, Var(y) -> 4, Lam(Tup(List((None,Fld(_,Var(y))))),Var(y)) -> 6)
//│ HashMap(4 -> Strat(ProdVar(1,1_y)), 6 -> Strat(ProdFun(Strat(ConsTup(List(Strat(ConsVar(1,1_y))))),Strat(ProdVar(1,1_y)))))
//│ Polydef end
//│ 
//│ Parsed: let id = (y,) => y;
//│ let id: forall 'a. 'a -> 'a
//│ id
//│    = [Function: id]
