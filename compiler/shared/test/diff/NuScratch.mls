:NewDefs

:d
fun foo(x,y,z,w) = x+y+z+w
foo(1,2,3,4)
//│ Lifted:
//│ TypingUnit {
//│   fun foo$1 = (x, y, z, w,) => +(+(+(x, y,), z,), w,)
//│   Code(List(foo$1(1, 2, 3, 4,)))
//│ }
//│ 0. Typing TypingUnit(List(NuFunDef(None,Var(foo),None,List(),Left(Lam(Tup(List((None,Fld(_,Var(x))), (None,Fld(_,Var(y))), (None,Fld(_,Var(z))), (None,Fld(_,Var(w))))),App(Var(+),Tup(List((None,Fld(_,App(Var(+),Tup(List((None,Fld(_,App(Var(+),Tup(List((None,Fld(_,Var(x))), (None,Fld(_,Var(y)))))))), (None,Fld(_,Var(z)))))))), (None,Fld(_,Var(w))))))))), App(Var(foo),Tup(List((None,Fld(_,IntLit(1))), (None,Fld(_,IntLit(2))), (None,Fld(_,IntLit(3))), (None,Fld(_,IntLit(4))))))))
//│ | 0. Created lazy type info for NuFunDef(None,Var(foo),None,List(),Left(Lam(Tup(List((None,Fld(_,Var(x))), (None,Fld(_,Var(y))), (None,Fld(_,Var(z))), (None,Fld(_,Var(w))))),App(Var(+),Tup(List((None,Fld(_,App(Var(+),Tup(List((None,Fld(_,App(Var(+),Tup(List((None,Fld(_,Var(x))), (None,Fld(_,Var(y)))))))), (None,Fld(_,Var(z)))))))), (None,Fld(_,Var(w)))))))))
//│ | Completing fun foo = (x, y, z, w,) => +(+(+(x, y,), z,), w,)
//│ | | Type params 
//│ | | Params 
//│ | | Type foo polymorphically? true && (0 === 0 || false || false
//│ | | 1. Typing term Lam(Tup(List((None,Fld(_,Var(x))), (None,Fld(_,Var(y))), (None,Fld(_,Var(z))), (None,Fld(_,Var(w))))),App(Var(+),Tup(List((None,Fld(_,App(Var(+),Tup(List((None,Fld(_,App(Var(+),Tup(List((None,Fld(_,Var(x))), (None,Fld(_,Var(y)))))))), (None,Fld(_,Var(z)))))))), (None,Fld(_,Var(w)))))))
//│ | | | 1. Typing pattern Tup(List((None,Fld(_,Var(x))), (None,Fld(_,Var(y))), (None,Fld(_,Var(z))), (None,Fld(_,Var(w)))))
//│ | | | | 1. Typing pattern Var(x)
//│ | | | | 1. : x48'
//│ | | | | 1. Typing pattern Var(y)
//│ | | | | 1. : y49'
//│ | | | | 1. Typing pattern Var(z)
//│ | | | | 1. : z50'
//│ | | | | 1. Typing pattern Var(w)
//│ | | | | 1. : w51'
//│ | | | 1. : (x48', y49', z50', w51',)
//│ | | | 1. Typing term App(Var(+),Tup(List((None,Fld(_,App(Var(+),Tup(List((None,Fld(_,App(Var(+),Tup(List((None,Fld(_,Var(x))), (None,Fld(_,Var(y)))))))), (None,Fld(_,Var(z)))))))), (None,Fld(_,Var(w))))))
//│ | | | | 1. Typing term Var(+)
//│ | | | | 1. : ((Int, Int,) -> Int)
//│ | | | | 1. Typing term App(Var(+),Tup(List((None,Fld(_,App(Var(+),Tup(List((None,Fld(_,Var(x))), (None,Fld(_,Var(y)))))))), (None,Fld(_,Var(z))))))
//│ | | | | | 1. Typing term Var(+)
//│ | | | | | 1. : ((Int, Int,) -> Int)
//│ | | | | | 1. Typing term App(Var(+),Tup(List((None,Fld(_,Var(x))), (None,Fld(_,Var(y))))))
//│ | | | | | | 1. Typing term Var(+)
//│ | | | | | | 1. : ((Int, Int,) -> Int)
//│ | | | | | | 1. Typing term Var(x)
//│ | | | | | | 1. : x48'
//│ | | | | | | 1. Typing term Var(y)
//│ | | | | | | 1. : y49'
//│ | | | | | | CONSTRAIN ((Int, Int,) -> Int) <! ((x48', y49',) -> α52')
//│ | | | | | |   where 
//│ | | | | | | 1. C ((Int, Int,) -> Int) <! ((x48', y49',) -> α52')    (0)
//│ | | | | | | | 1. C (x48', y49',) <! (Int, Int,)    (1)
//│ | | | | | | | | 1. C x48' <! Int    (2)
//│ | | | | | | | | | NEW x48' UB (0)
//│ | | | | | | | | 1. C y49' <! Int    (2)
//│ | | | | | | | | | NEW y49' UB (0)
//│ | | | | | | | 1. C Int <! α52'    (1)
//│ | | | | | | | | NEW α52' LB (0)
//│ | | | | | 1. : α52'
//│ | | | | | 1. Typing term Var(z)
//│ | | | | | 1. : z50'
//│ | | | | | CONSTRAIN ((Int, Int,) -> Int) <! ((α52', z50',) -> α53')
//│ | | | | |   where 
//│ 		α52' :> Int
//│ | | | | | 1. C ((Int, Int,) -> Int) <! ((α52', z50',) -> α53')    (0)
//│ | | | | | | 1. C (α52', z50',) <! (Int, Int,)    (1)
//│ | | | | | | | 1. C α52' <! Int    (2)
//│ | | | | | | | | NEW α52' UB (0)
//│ | | | | | | | | 1. C Int <! Int    (4)
//│ | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | 1. C z50' <! Int    (2)
//│ | | | | | | | | NEW z50' UB (0)
//│ | | | | | | 1. C Int <! α53'    (1)
//│ | | | | | | | NEW α53' LB (0)
//│ | | | | 1. : α53'
//│ | | | | 1. Typing term Var(w)
//│ | | | | 1. : w51'
//│ | | | | CONSTRAIN ((Int, Int,) -> Int) <! ((α53', w51',) -> α54')
//│ | | | |   where 
//│ 		α53' :> Int
//│ | | | | 1. C ((Int, Int,) -> Int) <! ((α53', w51',) -> α54')    (0)
//│ | | | | | 1. C (α53', w51',) <! (Int, Int,)    (1)
//│ | | | | | | 1. C α53' <! Int    (2)
//│ | | | | | | | NEW α53' UB (0)
//│ | | | | | | | 1. C Int <! Int    (4)
//│ | | | | | | | | Already a subtype by <:<
//│ | | | | | | 1. C w51' <! Int    (2)
//│ | | | | | | | NEW w51' UB (0)
//│ | | | | | 1. C Int <! α54'    (1)
//│ | | | | | | NEW α54' LB (0)
//│ | | | 1. : α54'
//│ | | 1. : ((x48', y49', z50', w51',) -> α54')
//│ | | CONSTRAIN ((x48', y49', z50', w51',) -> α54') <! foo55'
//│ | |   where 
//│ 		x48' <: Int
//│ 		y49' <: Int
//│ 		z50' <: Int
//│ 		w51' <: Int
//│ 		α54' :> Int
//│ | | 1. C ((x48', y49', z50', w51',) -> α54') <! foo55'    (0)
//│ | | | NEW foo55' LB (1)
//│ | Completed TypedNuFun(0,NuFunDef(None,Var(foo),None,List(),Left(Lam(Tup(List((None,Fld(_,Var(x))), (None,Fld(_,Var(y))), (None,Fld(_,Var(z))), (None,Fld(_,Var(w))))),App(Var(+),Tup(List((None,Fld(_,App(Var(+),Tup(List((None,Fld(_,App(Var(+),Tup(List((None,Fld(_,Var(x))), (None,Fld(_,Var(y)))))))), (None,Fld(_,Var(z)))))))), (None,Fld(_,Var(w))))))))),((x48', y49', z50', w51',) -> α54')) where 
//│ 		x48' <: Int
//│ 		y49' <: Int
//│ 		z50' <: Int
//│ 		w51' <: Int
//│ 		α54' :> Int
//│ | Typing unit statements
//│ | | 0. Typing term App(Var(foo),Tup(List((None,Fld(_,IntLit(1))), (None,Fld(_,IntLit(2))), (None,Fld(_,IntLit(3))), (None,Fld(_,IntLit(4))))))
//│ | | | 0. Typing term Var(foo)
//│ | | | 0. : ‹∀ 0. ((x48', y49', z50', w51',) -> α54')›
//│ | | | 0. Typing term IntLit(1)
//│ | | | 0. : #1<Int,Num,Object>
//│ | | | 0. Typing term IntLit(2)
//│ | | | 0. : #2<Int,Num,Object>
//│ | | | 0. Typing term IntLit(3)
//│ | | | 0. : #3<Int,Num,Object>
//│ | | | 0. Typing term IntLit(4)
//│ | | | 0. : #4<Int,Num,Object>
//│ | | | CONSTRAIN ‹∀ 0. ((x48', y49', z50', w51',) -> α54')› <! ((#1<Int,Num,Object>, #2<Int,Num,Object>, #3<Int,Num,Object>, #4<Int,Num,Object>,) -> α56)
//│ | | |   where 
//│ 		x48' <: Int
//│ 		y49' <: Int
//│ 		z50' <: Int
//│ 		w51' <: Int
//│ 		α54' :> Int
//│ | | | 0. C ‹∀ 0. ((x48', y49', z50', w51',) -> α54')› <! ((#1<Int,Num,Object>, #2<Int,Num,Object>, #3<Int,Num,Object>, #4<Int,Num,Object>,) -> α56)    (0)
//│ | | | | could be distribbed: Set(α54')
//│ | | | | cannot be distribbed: Set(x48', y49', z50', w51')
//│ | | | | inner: ‹∀ 0. α54'›
//│ | | | | raised: ((x48', y49', z50', w51',) -> ‹∀ 1. α54_57''›)
//│ | | | |   where: 
//│ 		x48' <: Int
//│ 		y49' <: Int
//│ 		z50' <: Int
//│ 		w51' <: Int
//│ 		α54_57'' :> Int
//│ | | | | DISTRIB-L'  ~>  ‹∀ 0. ((x48', y49', z50', w51',) -> ‹∀ 1. α54_57''›)›
//│ | | | | 0. C ‹∀ 0. ((x48', y49', z50', w51',) -> ‹∀ 1. α54_57''›)› <! ((#1<Int,Num,Object>, #2<Int,Num,Object>, #3<Int,Num,Object>, #4<Int,Num,Object>,) -> α56)    (2)
//│ | | | | | could be distribbed: Set()
//│ | | | | | INST [0]   ‹∀ 0. ((x48', y49', z50', w51',) -> ‹∀ 1. α54_57''›)›
//│ | | | | |   where  
//│ 		x48' <: Int
//│ 		y49' <: Int
//│ 		z50' <: Int
//│ 		w51' <: Int
//│ 		α54_57'' :> Int
//│ | | | | | TO [0] ~>  ((x48_58, y49_59, z50_60, w51_61,) -> ‹∀ 1. α54_57''›)
//│ | | | | |   where  
//│ 		α54_57'' :> Int
//│ 		x48_58 <: Int
//│ 		y49_59 <: Int
//│ 		z50_60 <: Int
//│ 		w51_61 <: Int
//│ | | | | | 0. C ((x48_58, y49_59, z50_60, w51_61,) -> ‹∀ 1. α54_57''›) <! ((#1<Int,Num,Object>, #2<Int,Num,Object>, #3<Int,Num,Object>, #4<Int,Num,Object>,) -> α56)    (5)
//│ | | | | | | 0. C (#1<Int,Num,Object>, #2<Int,Num,Object>, #3<Int,Num,Object>, #4<Int,Num,Object>,) <! (x48_58, y49_59, z50_60, w51_61,)    (3)
//│ | | | | | | | 0. C #1<Int,Num,Object> <! x48_58    (4)
//│ | | | | | | | | NEW x48_58 LB (0)
//│ | | | | | | | | 0. C #1<Int,Num,Object> <! Int    (7)
//│ | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | 0. C #2<Int,Num,Object> <! y49_59    (4)
//│ | | | | | | | | NEW y49_59 LB (0)
//│ | | | | | | | | 0. C #2<Int,Num,Object> <! Int    (7)
//│ | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | 0. C #3<Int,Num,Object> <! z50_60    (4)
//│ | | | | | | | | NEW z50_60 LB (0)
//│ | | | | | | | | 0. C #3<Int,Num,Object> <! Int    (7)
//│ | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | 0. C #4<Int,Num,Object> <! w51_61    (4)
//│ | | | | | | | | NEW w51_61 LB (0)
//│ | | | | | | | | 0. C #4<Int,Num,Object> <! Int    (7)
//│ | | | | | | | | | Already a subtype by <:<
//│ | | | | | | 0. C ‹∀ 1. α54_57''› <! α56    (3)
//│ | | | | | | | NEW α56 LB (0)
//│ | | 0. : α56
//│ | : Some(α56)
//│ ======== TYPED ========
//│ fun foo: ‹∀ 0. ((x48', y49', z50', w51',) -> α54')› where 
//│ |		x48' <: Int
//│ |		y49' <: Int
//│ |		z50' <: Int
//│ |		w51' <: Int
//│ |		α54' :> Int
//│ res: Some(α56) where 
//│ 		α56 :> ‹∀ 1. α54_57''›
//│ 		α54_57'' :> Int
//│ fun foo: (Int, Int, Int, Int) -> Int
//│ Int
//│ res
//│     = 10
