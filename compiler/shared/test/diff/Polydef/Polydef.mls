:NewDefs

:nolift
class X() {
    val num = 6
}
class Y() {
    val num = true
}
fun foo(pred) = if pred then X() else Y()
let obj = foo(true) in 
    if obj is
        X then obj.num
        Y then obj.num
//│ class X() {
//│   val num: 6
//│ }
//│ class Y() {
//│   val num: true
//│ }
//│ fun foo: Object -> (X | Y)
//│ 6 | true
//│ res
//│     = 6

:pd
:nolift
class X() {
    val num = 6
}
class Y() {
    val num = true
}
fun foo(pred) = if pred then X() else Y()
foo(true).num
//│ 
//│ Polydef:
//│ {class X() {let num = 6}
//│  class Y() {let num = true}
//│  fun foo = (pred,) => if (pred) then X() else Y()
//│  let selRes26 = foo(true,) in {if selRes26 is ‹(Y) then (selRes26).num
//│  (X) then (selRes26).num›}}
//│ End polydef
//│ 
//│ class X() {
//│   val num: 6
//│ }
//│ class Y() {
//│   val num: true
//│ }
//│ fun foo: Object -> (X | Y)
//│ 6 | true
//│ res
//│     = 6

:pd
:nolift
class X() {
    val num = 6
}
class Y() {
    val num = true
}
class Z() {
    val num = "abc"
}
fun foo(pred) =
    if pred == 1 then X() else 
        if pred == 2 then Y() else Z()
foo(5).num
//│ 
//│ Polydef:
//│ {class X() {let num = 6}
//│  class Y() {let num = true}
//│  class Z() {let num = "abc"}
//│  fun foo = (pred,) => {if (==(pred, 1,)) then X() else {if (==(pred, 2,)) then Y() else Z()}}
//│  let selRes58 = foo(5,) in {if selRes58 is ‹(Y) then (selRes58).num
//│  (Z) then (selRes58).num
//│  (X) then (selRes58).num›}}
//│ End polydef
//│ 
//│ class X() {
//│   val num: 6
//│ }
//│ class Y() {
//│   val num: true
//│ }
//│ class Z() {
//│   val num: "abc"
//│ }
//│ fun foo: Num -> (X | Y | Z)
//│ "abc" | 6 | true
//│ res
//│     = 'abc'
