:NewDefs


:p
fun main0() = 1
main0()
//│ |#fun| |main0|(||)| |#=| |1|↵|main0|(||)|
//│ AST: TypingUnit(NuFunDef(None, main0, None, [], Lam(Tup(), IntLit(1))), App(Var(main0), Tup()))
//│ Parsed:
//│ TypingUnit(NuFunDef(None, main0, None, [], Lam(Tup(), IntLit(1))), App(Var(main0), Tup()))
//│ Lifted:
//│ TypingUnit {fun main0$1 = () => 1; Code(List(main0$1()))}
//│ Parsed: fun main0 = () => 1; main0();
//│ fun main0: () -> 1
//│ 1
//│ res
//│     = 1

:p
fun main1(x) = x
main1(2)
//│ |#fun| |main1|(|x|)| |#=| |x|↵|main1|(|2|)|
//│ AST: TypingUnit(NuFunDef(None, main1, None, [], Lam(Tup(_: Var(x)), Var(x))), App(Var(main1), Tup(_: IntLit(2))))
//│ Parsed:
//│ TypingUnit(NuFunDef(None, main1, None, [], Lam(Tup(_: Var(x)), Var(x))), App(Var(main1), Tup(_: IntLit(2))))
//│ Lifted:
//│ TypingUnit {
//│   fun main1$1 = (x,) => x
//│   Code(List(main1$1(2,)))
//│ }
//│ Parsed: fun main1 = (x,) => x; main1(2,);
//│ fun main1: forall 'a. 'a -> 'a
//│ 2
//│ res
//│     = 2

:p
fun main2(x: Int) = x
main2(2)
//│ |#fun| |main2|(|x|#:| |Int|)| |#=| |x|↵|main2|(|2|)|
//│ AST: TypingUnit(NuFunDef(None, main2, None, [], Lam(Tup(x: Var(Int)), Var(x))), App(Var(main2), Tup(_: IntLit(2))))
//│ Parsed:
//│ TypingUnit(NuFunDef(None, main2, None, [], Lam(Tup(x: Var(Int)), Var(x))), App(Var(main2), Tup(_: IntLit(2))))
//│ Lifted:
//│ TypingUnit {
//│   fun main2$1 = (x: Int,) => x
//│   Code(List(main2$1(2,)))
//│ }
//│ Parsed: fun main2 = (x: Int,) => x; main2(2,);
//│ fun main2: (x: Int) -> Int
//│ Int
//│ res
//│     = 2

:mono
:p
:rc
1
2
3
//│ |1|↵|2|↵|3|
//│ AST: TypingUnit(IntLit(1), IntLit(2), IntLit(3))
//│ Parsed:
//│ TypingUnit(IntLit(1), IntLit(2), IntLit(3))
//│ Lifted:
//│ TypingUnit {Code(List(1)); Code(List(2)); Code(List(3))}
//│ Mono:
//│ 
//│ Defunc result: 
//│ fun main$$0() =
//│   #1
//│ fun main$$2() =
//│   #3
//│ fun main$$1() =
//│   #2
//│ main$$0()
//│ main$$1()
//│ main$$2()
//│ Parsed: fun main$$0 = () => 1; fun main$$2 = () => 3; fun main$$1 = () => 2; main$$0(); main$$1(); main$$2();
//│ fun main$$0: () -> 1
//│ fun main$$2: () -> 3
//│ fun main$$1: () -> 2
//│ 3
//│ res
//│     = 1
//│ res
//│     = 2
//│ res
//│     = 3
