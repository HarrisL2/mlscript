:NewDefs

:sd
:nolift

class X() {
    val num = 6
}
class Y() {
    val num = true
}
fun foo(pred) = if pred then X() else Y()
foo(true).num
//│ Lifted:
//│ TypingUnit {
//│   class X$1([]) {let num = 6}
//│   class Y$2([]) {let num = true}
//│   fun foo$1 = (pred,) => if (pred) then X$1() else Y$2()
//│   Code(List((foo$1(true,)).num))
//│ }
//│ class X() {
//│   val num: 6
//│ }
//│ class Y() {
//│   val num: true
//│ }
//│ fun foo: Object -> (X | Y)
//│ 6 | true
//│ res
//│     = 6

:sd
:nolift

class X() {
    val num = 6
}
class Y() {
    val num = true
}
class A() {
    val num = X()
}
class B() {
    val num = Y()
}
class C() {
    val num = X()
}
fun foo(pred) =
    if pred == 1 then A() else 
        if pred == 2 then B() else C()
foo(5).num.num
//│ Lifted:
//│ TypingUnit {
//│   class X$1([]) {let num = 6}
//│   class Y$2([]) {let num = true}
//│   class A$3([]) {let num = X$1()}
//│   class B$4([]) {let num = Y$2()}
//│   class C$5([]) {let num = X$1()}
//│   fun foo$1 = (pred,) => {if (==(pred, 1,)) then A$3() else {if (==(pred, 2,)) then B$4() else C$5()}}
//│   Code(List(((foo$1(5,)).num).num))
//│ }
//│ class X() {
//│   val num: 6
//│ }
//│ class Y() {
//│   val num: true
//│ }
//│ class A() {
//│   val num: X
//│ }
//│ class B() {
//│   val num: Y
//│ }
//│ class C() {
//│   val num: X
//│ }
//│ fun foo: Num -> (A | B | C)
//│ 6 | true
//│ res
//│     = 6
