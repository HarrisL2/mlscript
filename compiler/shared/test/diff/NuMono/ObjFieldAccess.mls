:NewDefs

:nm
class A(i: Int) {
    fun get1() = i
    fun get2 = i
}
val a = A(6)
a.get1()
a.get2
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(i: Var(Int)), (), None, None, TypingUnit(NuFunDef(None, get1, None, [], Lam(Tup(), Var(i))), NuFunDef(None, get2, None, [], Var(i)))), NuFunDef(Some(false), a, None, [], App(Var(A), Tup(_: IntLit(6)))), App(Sel(Var(a), get1), Tup()), Sel(Var(a), get2))
//│ Lifted:
//│ TypingUnit(NuTypeDef(class, A$1, (), Tup(i: Var(Int)), (), None, None, TypingUnit(NuFunDef(None, get1, None, [], Lam(Tup(), Sel(Var(this), i))), NuFunDef(None, get2, None, [], Sel(Var(this), i)))), NuFunDef(Some(false), a$1, None, [], App(Var(A$1), Tup(_: IntLit(6)))), App(Sel(Var(a$1), get1), Tup()), Sel(Var(a$1), get2))
//│ TypingUnit {
//│   class A$1([i: Int,]) {fun get1 = () => (this).i; fun get2 = (this).i}
//│   let a$1 = A$1(6,)
//│   Code(List((a$1).get1()))
//│   Code(List((a$1).get2))
//│ }
//│ Mono:
//│ TypingUnit(NuTypeDef(class, A$1, (), Tup(i: Var(Int)), (), None, None, TypingUnit()), NuFunDef(None, get1$A$1, None, [], Lam(Tup(_: Var(this)), Blk(NuFunDef(Some(false), obj, None, [], Var(this)); If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(A$1), IntLit(6)))), None)))), NuFunDef(None, get2$A$1, None, [], Lam(Tup(_: Var(this)), Blk(NuFunDef(Some(false), obj, None, [], Var(this)); If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(A$1), IntLit(6)))), None)))), NuFunDef(None, main$$3, None, [], Lam(Tup(), Blk(NuFunDef(Some(false), obj, None, [], Var(a$1)); If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(A$1), App(Var(get2$A$1), Tup(_: Var(obj)))))), None)))), NuFunDef(None, main$$2, None, [], Lam(Tup(), Blk(NuFunDef(Some(false), obj, None, [], Var(a$1)); If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(A$1), App(Var(get1$A$1), Tup(_: Var(obj)))))), None)))), NuFunDef(Some(false), a$1, None, [], App(Var(A$1), Tup(_: IntLit(6)))), App(Var(main$$2), Tup()), App(Var(main$$3), Tup()))
//│ TypingUnit {
//│   class A$1([i: Int,]) {}
//│   fun get1$A$1 = (this,) => {let obj = this; if obj is ‹(A$1) then 6›}
//│   fun get2$A$1 = (this,) => {let obj = this; if obj is ‹(A$1) then 6›}
//│   fun main$$3 = () => {let obj = a$1; if obj is ‹(A$1) then get2$A$1(obj,)›}
//│   fun main$$2 = () => {let obj = a$1; if obj is ‹(A$1) then get1$A$1(obj,)›}
//│   let a$1 = A$1(6,)
//│   Code(List(main$$2()))
//│   Code(List(main$$3()))
//│ }
//│ class A$1(i: Int)
//│ fun get1$A$1: A$1 -> 6
//│ fun get2$A$1: A$1 -> 6
//│ fun main$$3: () -> 6
//│ fun main$$2: () -> 6
//│ let a$1: A$1
//│ 6
//│ Code generation encountered an error:
//│   unguarded recursive use of by-value binding a$1
