:NewDefs


:nm
class Arithmetic() {
    fun use(num1, num2) = 0
}
class Add() extends Arithmetic {
    fun use(num1, num2) = num1+num2
}
class Sub() extends Arithmetic {
    fun use(num1, num2) = num1-num2
}
fun getArith(choice) = if choice == 1 then Add() else Sub()
getArith(1).use(4,6)
getArith(2).use(4,6)
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Arithmetic, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, use, None, [], Lam(Tup(_: Var(num1), _: Var(num2)), IntLit(0))))), NuTypeDef(class, Add, (), Tup(), (Var(Arithmetic)), None, None, TypingUnit(NuFunDef(None, use, None, [], Lam(Tup(_: Var(num1), _: Var(num2)), App(Var(+), Tup(_: Var(num1), _: Var(num2))))))), NuTypeDef(class, Sub, (), Tup(), (Var(Arithmetic)), None, None, TypingUnit(NuFunDef(None, use, None, [], Lam(Tup(_: Var(num1), _: Var(num2)), App(Var(-), Tup(_: Var(num1), _: Var(num2))))))), NuFunDef(None, getArith, None, [], Lam(Tup(_: Var(choice)), If(IfThen(App(Var(==), Tup(_: Var(choice), _: IntLit(1))), App(Var(Add), Tup())), Some(App(Var(Sub), Tup()))))), App(Sel(App(Var(getArith), Tup(_: IntLit(1))), use), Tup(_: IntLit(4), _: IntLit(6))), App(Sel(App(Var(getArith), Tup(_: IntLit(2))), use), Tup(_: IntLit(4), _: IntLit(6))))
//│ Lifted:
//│ TypingUnit(NuTypeDef(class, Arithmetic$1, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, use, None, [], Lam(Tup(_: Var(num1), _: Var(num2)), IntLit(0))))), NuTypeDef(class, Add$2, (), Tup(), (App(Var(Arithmetic$1), Tup())), None, None, TypingUnit(NuFunDef(None, use, None, [], Lam(Tup(_: Var(num1), _: Var(num2)), App(Var(+), Tup(_: Var(num1), _: Var(num2))))))), NuTypeDef(class, Sub$3, (), Tup(), (App(Var(Arithmetic$1), Tup())), None, None, TypingUnit(NuFunDef(None, use, None, [], Lam(Tup(_: Var(num1), _: Var(num2)), App(Var(-), Tup(_: Var(num1), _: Var(num2))))))), NuFunDef(None, getArith$1, None, [], Lam(Tup(_: Var(choice)), If(IfThen(App(Var(==), Tup(_: Var(choice), _: IntLit(1))), App(Var(Add$2), Tup())), Some(App(Var(Sub$3), Tup()))))), App(Sel(App(Var(getArith$1), Tup(_: IntLit(1))), use), Tup(_: IntLit(4), _: IntLit(6))), App(Sel(App(Var(getArith$1), Tup(_: IntLit(2))), use), Tup(_: IntLit(4), _: IntLit(6))))
//│ TypingUnit {
//│   class Arithmetic$1([]) {fun use = (num1, num2,) => 0}
//│   class Add$2([]): Arithmetic$1() {fun use = (num1, num2,) => +(num1, num2,)}
//│   class Sub$3([]): Arithmetic$1() {fun use = (num1, num2,) => -(num1, num2,)}
//│   fun getArith$1 = (choice,) => if (==(choice, 1,)) then Add$2() else Sub$3()
//│   Code(List((getArith$1(1,)).use(4, 6,)))
//│   Code(List((getArith$1(2,)).use(4, 6,)))
//│ }
//│ Mono:
//│ TypingUnit(NuTypeDef(class, Arithmetic$1, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, Sub$3, (), Tup(), (App(Var(Arithmetic$1), Tup())), None, None, TypingUnit()), NuTypeDef(class, Add$2, (), Tup(), (App(Var(Arithmetic$1), Tup())), None, None, TypingUnit()), NuFunDef(None, getArith$1, None, [], Lam(Tup(_: Var(choice)), If(IfThen(App(Var(==), Tup(_: Var(choice), _: IntLit(1))), App(Var(Add$2), Tup())), Some(App(Var(Sub$3), Tup()))))), NuFunDef(None, use$Add$2, None, [], Lam(Tup(_: Var(this), _: Var(num1), _: Var(num2)), App(Var(+), Tup(_: Var(num1), _: Var(num2))))), NuFunDef(None, use$Sub$3, None, [], Lam(Tup(_: Var(this), _: Var(num1), _: Var(num2)), App(Var(-), Tup(_: Var(num1), _: Var(num2))))), NuFunDef(None, main$$5, None, [], Lam(Tup(), Let(false, obj, App(Var(getArith$1), Tup(_: IntLit(2))), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(Sub$3), App(Var(use$Sub$3), Tup(_: Var(obj), _: IntLit(4), _: IntLit(6))));IfThen(Var(Add$2), App(Var(use$Add$2), Tup(_: Var(obj), _: IntLit(4), _: IntLit(6)))))), None)))), NuFunDef(None, main$$4, None, [], Lam(Tup(), Let(false, obj, App(Var(getArith$1), Tup(_: IntLit(1))), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(Sub$3), App(Var(use$Sub$3), Tup(_: Var(obj), _: IntLit(4), _: IntLit(6))));IfThen(Var(Add$2), App(Var(use$Add$2), Tup(_: Var(obj), _: IntLit(4), _: IntLit(6)))))), None)))), App(Var(main$$4), Tup()), App(Var(main$$5), Tup()))
//│ TypingUnit {
//│   class Arithmetic$1([]) {}
//│   class Sub$3([]): Arithmetic$1() {}
//│   class Add$2([]): Arithmetic$1() {}
//│   fun getArith$1 = (choice,) => if (==(choice, 1,)) then Add$2() else Sub$3()
//│   fun use$Add$2 = (this, num1, num2,) => +(num1, num2,)
//│   fun use$Sub$3 = (this, num1, num2,) => -(num1, num2,)
//│   fun main$$5 = () => let obj = getArith$1(2,) in if obj is ‹(Sub$3) then use$Sub$3(obj, 4, 6,); (Add$2) then use$Add$2(obj, 4, 6,)›
//│   fun main$$4 = () => let obj = getArith$1(1,) in if obj is ‹(Sub$3) then use$Sub$3(obj, 4, 6,); (Add$2) then use$Add$2(obj, 4, 6,)›
//│   Code(List(main$$4()))
//│   Code(List(main$$5()))
//│ }
//│ class Arithmetic$1()
//│ class Sub$3() extends Arithmetic$1
//│ class Add$2() extends Arithmetic$1
//│ fun getArith$1: Num -> (Add$2 | Sub$3)
//│ fun use$Add$2: (anything, Int, Int) -> Int
//│ fun use$Sub$3: (anything, Int, Int) -> Int
//│ fun main$$5: () -> Int
//│ fun main$$4: () -> Int
//│ Int
//│ res
//│     = 10
//│ res
//│     = -2
