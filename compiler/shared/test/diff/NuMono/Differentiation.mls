// A usecase test for defunctionalization

:NewDefs

:nm
class Exp() {
    virtual fun derive(): Exp
    virtual fun derive() = Exp()
    virtual fun getVal: Str
    virtual fun getVal = ""
}
class Numeric(i: Int) extends Exp {
    fun derive() = Numeric(0)
    fun getNum = i
    fun getVal = toString(i)
}
class Variable(nm: Str) extends Exp {
    fun derive() = Numeric(1)
    fun getVal = nm
}
class Sum(lhs: Exp, rhs: Exp) extends Exp {
    fun derive() = Sum(lhs.derive(), rhs.derive())
    fun getVal = concat("(")(concat(concat(concat(lhs.getVal)(" + "))(rhs.getVal))(")"))
}
class Mul(lhs: Exp, rhs: Exp) extends Exp {
    fun derive() = Sum(Mul(lhs.derive(), rhs), Mul(lhs, rhs.derive()))
    fun getVal = concat("(")(concat(concat(concat(lhs.getVal)(" * "))(rhs.getVal))(")"))
}
class Pow(lhs: Variable, rhs: Numeric) extends Exp {
    fun derive() = Mul(rhs, Pow(lhs, Numeric(rhs.getNum - 1)))
    fun getVal = concat("(")(concat(concat(concat(lhs.getVal)(" ^ "))(rhs.getVal))(")"))
}
Sum(Variable("x"), Numeric(3)).derive().getVal
Mul(Variable("x"), Numeric(3)).derive().getVal
Pow(Variable("x"), Numeric(3)).derive().getVal
Mul(Pow(Variable("x"), Numeric(2)), Pow(Variable("y"), Numeric(2))).derive().getVal // FIXME: Stack overflow, cause unsure
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Exp, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, derive, None, [], PolyType(List(),Function(Tuple(List()),TypeName(Exp)))), NuFunDef(None, derive, None, [], Lam(Tup(), App(Var(Exp), Tup()))), NuFunDef(None, getVal, None, [], PolyType(List(),TypeName(Str))), NuFunDef(None, getVal, None, [], StrLit()))), NuTypeDef(class, Numeric, (), Tup(i: Var(Int)), (Var(Exp)), None, None, TypingUnit(NuFunDef(None, derive, None, [], Lam(Tup(), App(Var(Numeric), Tup(_: IntLit(0))))), NuFunDef(None, getNum, None, [], Var(i)), NuFunDef(None, getVal, None, [], App(Var(toString), Tup(_: Var(i)))))), NuTypeDef(class, Variable, (), Tup(nm: Var(Str)), (Var(Exp)), None, None, TypingUnit(NuFunDef(None, derive, None, [], Lam(Tup(), App(Var(Numeric), Tup(_: IntLit(1))))), NuFunDef(None, getVal, None, [], Var(nm)))), NuTypeDef(class, Sum, (), Tup(lhs: Var(Exp), rhs: Var(Exp)), (Var(Exp)), None, None, TypingUnit(NuFunDef(None, derive, None, [], Lam(Tup(), App(Var(Sum), Tup(_: App(Sel(Var(lhs), derive), Tup()), _: App(Sel(Var(rhs), derive), Tup()))))), NuFunDef(None, getVal, None, [], App(App(Var(concat), Tup(_: StrLit(())), Tup(_: App(App(Var(concat), Tup(_: App(App(Var(concat), Tup(_: App(App(Var(concat), Tup(_: Sel(Var(lhs), getVal))), Tup(_: StrLit( + ))))), Tup(_: Sel(Var(rhs), getVal))))), Tup(_: StrLit())))))))), NuTypeDef(class, Mul, (), Tup(lhs: Var(Exp), rhs: Var(Exp)), (Var(Exp)), None, None, TypingUnit(NuFunDef(None, derive, None, [], Lam(Tup(), App(Var(Sum), Tup(_: App(Var(Mul), Tup(_: App(Sel(Var(lhs), derive), Tup()), _: Var(rhs))), _: App(Var(Mul), Tup(_: Var(lhs), _: App(Sel(Var(rhs), derive), Tup()))))))), NuFunDef(None, getVal, None, [], App(App(Var(concat), Tup(_: StrLit(())), Tup(_: App(App(Var(concat), Tup(_: App(App(Var(concat), Tup(_: App(App(Var(concat), Tup(_: Sel(Var(lhs), getVal))), Tup(_: StrLit( * ))))), Tup(_: Sel(Var(rhs), getVal))))), Tup(_: StrLit())))))))), NuTypeDef(class, Pow, (), Tup(lhs: Var(Variable), rhs: Var(Numeric)), (Var(Exp)), None, None, TypingUnit(NuFunDef(None, derive, None, [], Lam(Tup(), App(Var(Mul), Tup(_: Var(rhs), _: App(Var(Pow), Tup(_: Var(lhs), _: App(Var(Numeric), Tup(_: App(Var(-), Tup(_: Sel(Var(rhs), getNum), _: IntLit(1))))))))))), NuFunDef(None, getVal, None, [], App(App(Var(concat), Tup(_: StrLit(())), Tup(_: App(App(Var(concat), Tup(_: App(App(Var(concat), Tup(_: App(App(Var(concat), Tup(_: Sel(Var(lhs), getVal))), Tup(_: StrLit( ^ ))))), Tup(_: Sel(Var(rhs), getVal))))), Tup(_: StrLit())))))))), Sel(App(Sel(App(Var(Sum), Tup(_: App(Var(Variable), Tup(_: StrLit(x))), _: App(Var(Numeric), Tup(_: IntLit(3))))), derive), Tup()), getVal), Sel(App(Sel(App(Var(Mul), Tup(_: App(Var(Variable), Tup(_: StrLit(x))), _: App(Var(Numeric), Tup(_: IntLit(3))))), derive), Tup()), getVal), Sel(App(Sel(App(Var(Pow), Tup(_: App(Var(Variable), Tup(_: StrLit(x))), _: App(Var(Numeric), Tup(_: IntLit(3))))), derive), Tup()), getVal), Sel(App(Sel(App(Var(Mul), Tup(_: App(Var(Pow), Tup(_: App(Var(Variable), Tup(_: StrLit(x))), _: App(Var(Numeric), Tup(_: IntLit(2))))), _: App(Var(Pow), Tup(_: App(Var(Variable), Tup(_: StrLit(y))), _: App(Var(Numeric), Tup(_: IntLit(2))))))), derive), Tup()), getVal))
//│ Lifted:
//│ TypingUnit(NuTypeDef(class, Exp$1, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, derive, None, [], PolyType(List(),Function(Tuple(List()),TypeName(Exp$1)))), NuFunDef(None, derive, None, [], Lam(Tup(), App(Var(Exp$1), Tup()))), NuFunDef(None, getVal, None, [], PolyType(List(),TypeName(Str))), NuFunDef(None, getVal, None, [], StrLit()))), NuTypeDef(class, Numeric$2, (), Tup(i: Var(Int)), (App(Var(Exp$1), Tup())), None, None, TypingUnit(NuFunDef(None, derive, None, [], Lam(Tup(), App(Var(Numeric$2), Tup(_: IntLit(0))))), NuFunDef(None, getNum, None, [], Sel(Var(this), i)), NuFunDef(None, getVal, None, [], App(Var(toString), Tup(_: Sel(Var(this), i)))))), NuTypeDef(class, Variable$3, (), Tup(nm: Var(Str)), (App(Var(Exp$1), Tup())), None, None, TypingUnit(NuFunDef(None, derive, None, [], Lam(Tup(), App(Var(Numeric$2), Tup(_: IntLit(1))))), NuFunDef(None, getVal, None, [], Sel(Var(this), nm)))), NuTypeDef(class, Sum$4, (), Tup(lhs: Var(Exp$1), rhs: Var(Exp$1)), (App(Var(Exp$1), Tup())), None, None, TypingUnit(NuFunDef(None, derive, None, [], Lam(Tup(), App(Var(Sum$4), Tup(_: App(Sel(Sel(Var(this), lhs), derive), Tup()), _: App(Sel(Sel(Var(this), rhs), derive), Tup()))))), NuFunDef(None, getVal, None, [], App(App(Var(concat), Tup(_: StrLit(())), Tup(_: App(App(Var(concat), Tup(_: App(App(Var(concat), Tup(_: App(App(Var(concat), Tup(_: Sel(Sel(Var(this), lhs), getVal))), Tup(_: StrLit( + ))))), Tup(_: Sel(Sel(Var(this), rhs), getVal))))), Tup(_: StrLit())))))))), NuTypeDef(class, Mul$5, (), Tup(lhs: Var(Exp$1), rhs: Var(Exp$1)), (App(Var(Exp$1), Tup())), None, None, TypingUnit(NuFunDef(None, derive, None, [], Lam(Tup(), App(Var(Sum$4), Tup(_: App(Var(Mul$5), Tup(_: App(Sel(Sel(Var(this), lhs), derive), Tup()), _: Sel(Var(this), rhs))), _: App(Var(Mul$5), Tup(_: Sel(Var(this), lhs), _: App(Sel(Sel(Var(this), rhs), derive), Tup()))))))), NuFunDef(None, getVal, None, [], App(App(Var(concat), Tup(_: StrLit(())), Tup(_: App(App(Var(concat), Tup(_: App(App(Var(concat), Tup(_: App(App(Var(concat), Tup(_: Sel(Sel(Var(this), lhs), getVal))), Tup(_: StrLit( * ))))), Tup(_: Sel(Sel(Var(this), rhs), getVal))))), Tup(_: StrLit())))))))), NuTypeDef(class, Pow$6, (), Tup(lhs: Var(Variable$3), rhs: Var(Numeric$2)), (App(Var(Exp$1), Tup())), None, None, TypingUnit(NuFunDef(None, derive, None, [], Lam(Tup(), App(Var(Mul$5), Tup(_: Sel(Var(this), rhs), _: App(Var(Pow$6), Tup(_: Sel(Var(this), lhs), _: App(Var(Numeric$2), Tup(_: App(Var(-), Tup(_: Sel(Sel(Var(this), rhs), getNum), _: IntLit(1))))))))))), NuFunDef(None, getVal, None, [], App(App(Var(concat), Tup(_: StrLit(())), Tup(_: App(App(Var(concat), Tup(_: App(App(Var(concat), Tup(_: App(App(Var(concat), Tup(_: Sel(Sel(Var(this), lhs), getVal))), Tup(_: StrLit( ^ ))))), Tup(_: Sel(Sel(Var(this), rhs), getVal))))), Tup(_: StrLit())))))))), Sel(App(Sel(App(Var(Sum$4), Tup(_: App(Var(Variable$3), Tup(_: StrLit(x))), _: App(Var(Numeric$2), Tup(_: IntLit(3))))), derive), Tup()), getVal), Sel(App(Sel(App(Var(Mul$5), Tup(_: App(Var(Variable$3), Tup(_: StrLit(x))), _: App(Var(Numeric$2), Tup(_: IntLit(3))))), derive), Tup()), getVal), Sel(App(Sel(App(Var(Pow$6), Tup(_: App(Var(Variable$3), Tup(_: StrLit(x))), _: App(Var(Numeric$2), Tup(_: IntLit(3))))), derive), Tup()), getVal), Sel(App(Sel(App(Var(Mul$5), Tup(_: App(Var(Pow$6), Tup(_: App(Var(Variable$3), Tup(_: StrLit(x))), _: App(Var(Numeric$2), Tup(_: IntLit(2))))), _: App(Var(Pow$6), Tup(_: App(Var(Variable$3), Tup(_: StrLit(y))), _: App(Var(Numeric$2), Tup(_: IntLit(2))))))), derive), Tup()), getVal))
//│ TypingUnit {
//│   class Exp$1([]) {
//│     fun derive = () -> Exp$1
//│     fun derive = () => Exp$1()
//│     fun getVal = Str
//│     fun getVal = ""
//│   }
//│   class Numeric$2([i: Int,]): Exp$1() {
//│     fun derive = () => Numeric$2(0,)
//│     fun getNum = (this).i
//│     fun getVal = toString((this).i,)
//│   }
//│   class Variable$3([nm: Str,]): Exp$1() {fun derive = () => Numeric$2(1,); fun getVal = (this).nm}
//│   class Sum$4([lhs: Exp$1, rhs: Exp$1,]): Exp$1() {
//│     fun derive = () => Sum$4(((this).lhs).derive(), ((this).rhs).derive(),)
//│     fun getVal = concat("(",)(concat(concat(concat(((this).lhs).getVal,)(" + ",),)(((this).rhs).getVal,),)(")",),)
//│   }
//│   class Mul$5([lhs: Exp$1, rhs: Exp$1,]): Exp$1() {
//│     fun derive = () => Sum$4(Mul$5(((this).lhs).derive(), (this).rhs,), Mul$5((this).lhs, ((this).rhs).derive(),),)
//│     fun getVal = concat("(",)(concat(concat(concat(((this).lhs).getVal,)(" * ",),)(((this).rhs).getVal,),)(")",),)
//│   }
//│   class Pow$6([lhs: Variable$3, rhs: Numeric$2,]): Exp$1() {
//│     fun derive = () => Mul$5((this).rhs, Pow$6((this).lhs, Numeric$2(-(((this).rhs).getNum, 1,),),),)
//│     fun getVal = concat("(",)(concat(concat(concat(((this).lhs).getVal,)(" ^ ",),)(((this).rhs).getVal,),)(")",),)
//│   }
//│   Code(List(((Sum$4(Variable$3("x",), Numeric$2(3,),)).derive()).getVal))
//│   Code(List(((Mul$5(Variable$3("x",), Numeric$2(3,),)).derive()).getVal))
//│   Code(List(((Pow$6(Variable$3("x",), Numeric$2(3,),)).derive()).getVal))
//│   Code(List(((Mul$5(Pow$6(Variable$3("x",), Numeric$2(2,),), Pow$6(Variable$3("y",), Numeric$2(2,),),)).derive()).getVal))
//│ }
//│ Mono:
//│ TypingUnit(NuTypeDef(class, Numeric$2, (), Tup(i: Var(Int)), (App(Var(Exp$1), Tup())), None, None, TypingUnit()), NuTypeDef(class, Pow$6, (), Tup(lhs: Var(Variable$3), rhs: Var(Numeric$2)), (App(Var(Exp$1), Tup())), None, None, TypingUnit()), NuTypeDef(class, Sum$4, (), Tup(lhs: Var(Exp$1), rhs: Var(Exp$1)), (App(Var(Exp$1), Tup())), None, None, TypingUnit()), NuTypeDef(class, Mul$5, (), Tup(lhs: Var(Exp$1), rhs: Var(Exp$1)), (App(Var(Exp$1), Tup())), None, None, TypingUnit()), NuTypeDef(class, Variable$3, (), Tup(nm: Var(Str)), (App(Var(Exp$1), Tup())), None, None, TypingUnit()), NuTypeDef(class, Exp$1, (), Tup(), (), None, None, TypingUnit()), NuFunDef(None, getVal$Sum$4, None, [], Lam(Tup(_: Var(this)), App(App(Var(concat), Tup(_: StrLit(())), Tup(_: App(App(Var(concat), Tup(_: App(App(Var(concat), Tup(_: App(App(Var(concat), Tup(_: Let(false, obj, Let(false, obj, Var(this), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(App(Var(Sum$4), Tup(_: Var(lhs), _: Var(rhs))), Var(lhs)))), None)), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(Numeric$2), App(Var(getVal$Numeric$2), Tup(_: Var(obj))));IfThen(Var(Mul$5), App(Var(getVal$Mul$5), Tup(_: Var(obj)))))), None)))), Tup(_: StrLit( + ))))), Tup(_: Let(false, obj, Let(false, obj, Var(this), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(App(Var(Sum$4), Tup(_: Var(lhs), _: Var(rhs))), Var(rhs)))), None)), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(Numeric$2), App(Var(getVal$Numeric$2), Tup(_: Var(obj))));IfThen(Var(Mul$5), App(Var(getVal$Mul$5), Tup(_: Var(obj)))))), None)))))), Tup(_: StrLit()))))))), NuFunDef(None, derive$Pow$6, None, [], Lam(Tup(_: Var(this)), App(Var(Mul$5), Tup(_: Let(false, obj, Var(this), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(App(Var(Pow$6), Tup(_: Var(lhs), _: Var(rhs))), Var(rhs)))), None)), _: App(Var(Pow$6), Tup(_: Let(false, obj, Var(this), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(App(Var(Pow$6), Tup(_: Var(lhs), _: Var(rhs))), Var(lhs)))), None)), _: App(Var(Numeric$2), Tup(_: App(Var(-), Tup(_: Let(false, obj, Let(false, obj, Var(this), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(App(Var(Pow$6), Tup(_: Var(lhs), _: Var(rhs))), Var(rhs)))), None)), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(Numeric$2), App(Var(getNum$Numeric$2), Tup(_: Var(obj)))))), None)), _: IntLit(1))))))))))), NuFunDef(None, getVal$Pow$6, None, [], Lam(Tup(_: Var(this)), App(App(Var(concat), Tup(_: StrLit(())), Tup(_: App(App(Var(concat), Tup(_: App(App(Var(concat), Tup(_: App(App(Var(concat), Tup(_: Let(false, obj, Let(false, obj, Var(this), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(App(Var(Pow$6), Tup(_: Var(lhs), _: Var(rhs))), Var(lhs)))), None)), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(Variable$3), App(Var(getVal$Variable$3), Tup(_: Var(obj)))))), None)))), Tup(_: StrLit( ^ ))))), Tup(_: Let(false, obj, Let(false, obj, Var(this), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(App(Var(Pow$6), Tup(_: Var(lhs), _: Var(rhs))), Var(rhs)))), None)), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(Numeric$2), App(Var(getVal$Numeric$2), Tup(_: Var(obj)))))), None)))))), Tup(_: StrLit()))))))), NuFunDef(None, derive$Sum$4, None, [], Lam(Tup(_: Var(this)), App(Var(Sum$4), Tup(_: Let(false, obj, Let(false, obj, Var(this), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(App(Var(Sum$4), Tup(_: Var(lhs), _: Var(rhs))), Var(lhs)))), None)), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(Variable$3), App(Var(derive$Variable$3), Tup(_: Var(obj)))))), None)), _: Let(false, obj, Let(false, obj, Var(this), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(App(Var(Sum$4), Tup(_: Var(lhs), _: Var(rhs))), Var(rhs)))), None)), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(Numeric$2), App(Var(derive$Numeric$2), Tup(_: Var(obj)))))), None)))))), NuFunDef(None, main$$9, None, [], Lam(Tup(), Let(false, obj, Let(false, obj, App(Var(Mul$5), Tup(_: App(Var(Pow$6), Tup(_: App(Var(Variable$3), Tup(_: StrLit(x))), _: App(Var(Numeric$2), Tup(_: IntLit(2))))), _: App(Var(Pow$6), Tup(_: App(Var(Variable$3), Tup(_: StrLit(y))), _: App(Var(Numeric$2), Tup(_: IntLit(2))))))), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(Mul$5), App(Var(derive$Mul$5), Tup(_: Var(obj)))))), None)), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(Sum$4), App(Var(getVal$Sum$4), Tup(_: Var(obj)))))), None)))), NuFunDef(None, derive$Numeric$2, None, [], Lam(Tup(_: Var(this)), App(Var(Numeric$2), Tup(_: IntLit(0))))), NuFunDef(None, getNum$Numeric$2, None, [], Lam(Tup(_: Var(this)), Let(false, obj, Var(this), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(App(Var(Numeric$2), Tup(_: Var(i))), Var(i)))), None)))), NuFunDef(None, derive$Variable$3, None, [], Lam(Tup(_: Var(this)), App(Var(Numeric$2), Tup(_: IntLit(1))))), NuFunDef(None, getVal$Mul$5, None, [], Lam(Tup(_: Var(this)), App(App(Var(concat), Tup(_: StrLit(())), Tup(_: App(App(Var(concat), Tup(_: App(App(Var(concat), Tup(_: App(App(Var(concat), Tup(_: Let(false, obj, Let(false, obj, Var(this), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(App(Var(Mul$5), Tup(_: Var(lhs), _: Var(rhs))), Var(lhs)))), None)), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(Mul$5), App(Var(getVal$Mul$5), Tup(_: Var(obj))));IfThen(Var(Variable$3), App(Var(getVal$Variable$3), Tup(_: Var(obj))));IfThen(Var(Pow$6), App(Var(getVal$Pow$6), Tup(_: Var(obj))));IfThen(Var(Numeric$2), App(Var(getVal$Numeric$2), Tup(_: Var(obj)))))), None)))), Tup(_: StrLit( * ))))), Tup(_: Let(false, obj, Let(false, obj, Var(this), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(App(Var(Mul$5), Tup(_: Var(lhs), _: Var(rhs))), Var(rhs)))), None)), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(Mul$5), App(Var(getVal$Mul$5), Tup(_: Var(obj))));IfThen(Var(Pow$6), App(Var(getVal$Pow$6), Tup(_: Var(obj))));IfThen(Var(Numeric$2), App(Var(getVal$Numeric$2), Tup(_: Var(obj)))))), None)))))), Tup(_: StrLit()))))))), NuFunDef(None, main$$8, None, [], Lam(Tup(), Let(false, obj, Let(false, obj, App(Var(Pow$6), Tup(_: App(Var(Variable$3), Tup(_: StrLit(x))), _: App(Var(Numeric$2), Tup(_: IntLit(3))))), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(Pow$6), App(Var(derive$Pow$6), Tup(_: Var(obj)))))), None)), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(Mul$5), App(Var(getVal$Mul$5), Tup(_: Var(obj)))))), None)))), NuFunDef(None, main$$7, None, [], Lam(Tup(), Let(false, obj, Let(false, obj, App(Var(Mul$5), Tup(_: App(Var(Variable$3), Tup(_: StrLit(x))), _: App(Var(Numeric$2), Tup(_: IntLit(3))))), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(Mul$5), App(Var(derive$Mul$5), Tup(_: Var(obj)))))), None)), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(Sum$4), App(Var(getVal$Sum$4), Tup(_: Var(obj)))))), None)))), NuFunDef(None, main$$6, None, [], Lam(Tup(), Let(false, obj, Let(false, obj, App(Var(Sum$4), Tup(_: App(Var(Variable$3), Tup(_: StrLit(x))), _: App(Var(Numeric$2), Tup(_: IntLit(3))))), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(Sum$4), App(Var(derive$Sum$4), Tup(_: Var(obj)))))), None)), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(Sum$4), App(Var(getVal$Sum$4), Tup(_: Var(obj)))))), None)))), NuFunDef(None, getVal$Variable$3, None, [], Lam(Tup(_: Var(this)), Let(false, obj, Var(this), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(App(Var(Variable$3), Tup(_: Var(nm))), Var(nm)))), None)))), NuFunDef(None, getVal$Numeric$2, None, [], Lam(Tup(_: Var(this)), App(Var(toString), Tup(_: Let(false, obj, Var(this), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(App(Var(Numeric$2), Tup(_: Var(i))), Var(i)))), None)))))), NuFunDef(None, derive$Mul$5, None, [], Lam(Tup(_: Var(this)), App(Var(Sum$4), Tup(_: App(Var(Mul$5), Tup(_: Let(false, obj, Let(false, obj, Var(this), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(App(Var(Mul$5), Tup(_: Var(lhs), _: Var(rhs))), Var(lhs)))), None)), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(Variable$3), App(Var(derive$Variable$3), Tup(_: Var(obj))));IfThen(Var(Pow$6), App(Var(derive$Pow$6), Tup(_: Var(obj)))))), None)), _: Let(false, obj, Var(this), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(App(Var(Mul$5), Tup(_: Var(lhs), _: Var(rhs))), Var(rhs)))), None)))), _: App(Var(Mul$5), Tup(_: Let(false, obj, Var(this), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(App(Var(Mul$5), Tup(_: Var(lhs), _: Var(rhs))), Var(lhs)))), None)), _: Let(false, obj, Let(false, obj, Var(this), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(App(Var(Mul$5), Tup(_: Var(lhs), _: Var(rhs))), Var(rhs)))), None)), If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(Numeric$2), App(Var(derive$Numeric$2), Tup(_: Var(obj))));IfThen(Var(Pow$6), App(Var(derive$Pow$6), Tup(_: Var(obj)))))), None)))))))), App(Var(main$$6), Tup()), App(Var(main$$7), Tup()), App(Var(main$$8), Tup()), App(Var(main$$9), Tup()))
//│ TypingUnit {
//│   class Numeric$2([i: Int,]): Exp$1() {}
//│   class Pow$6([lhs: Variable$3, rhs: Numeric$2,]): Exp$1() {}
//│   class Sum$4([lhs: Exp$1, rhs: Exp$1,]): Exp$1() {}
//│   class Mul$5([lhs: Exp$1, rhs: Exp$1,]): Exp$1() {}
//│   class Variable$3([nm: Str,]): Exp$1() {}
//│   class Exp$1([]) {}
//│   fun getVal$Sum$4 = (this,) => concat("(",)(concat(concat(concat(let obj = let obj = this in if obj is ‹(Sum$4(lhs, rhs,)) then lhs› in if obj is ‹(Numeric$2) then getVal$Numeric$2(obj,); (Mul$5) then getVal$Mul$5(obj,)›,)(" + ",),)(let obj = let obj = this in if obj is ‹(Sum$4(lhs, rhs,)) then rhs› in if obj is ‹(Numeric$2) then getVal$Numeric$2(obj,); (Mul$5) then getVal$Mul$5(obj,)›,),)(")",),)
//│   fun derive$Pow$6 = (this,) => Mul$5(let obj = this in if obj is ‹(Pow$6(lhs, rhs,)) then rhs›, Pow$6(let obj = this in if obj is ‹(Pow$6(lhs, rhs,)) then lhs›, Numeric$2(-(let obj = let obj = this in if obj is ‹(Pow$6(lhs, rhs,)) then rhs› in if obj is ‹(Numeric$2) then getNum$Numeric$2(obj,)›, 1,),),),)
//│   fun getVal$Pow$6 = (this,) => concat("(",)(concat(concat(concat(let obj = let obj = this in if obj is ‹(Pow$6(lhs, rhs,)) then lhs› in if obj is ‹(Variable$3) then getVal$Variable$3(obj,)›,)(" ^ ",),)(let obj = let obj = this in if obj is ‹(Pow$6(lhs, rhs,)) then rhs› in if obj is ‹(Numeric$2) then getVal$Numeric$2(obj,)›,),)(")",),)
//│   fun derive$Sum$4 = (this,) => Sum$4(let obj = let obj = this in if obj is ‹(Sum$4(lhs, rhs,)) then lhs› in if obj is ‹(Variable$3) then derive$Variable$3(obj,)›, let obj = let obj = this in if obj is ‹(Sum$4(lhs, rhs,)) then rhs› in if obj is ‹(Numeric$2) then derive$Numeric$2(obj,)›,)
//│   fun main$$9 = () => let obj = let obj = Mul$5(Pow$6(Variable$3("x",), Numeric$2(2,),), Pow$6(Variable$3("y",), Numeric$2(2,),),) in if obj is ‹(Mul$5) then derive$Mul$5(obj,)› in if obj is ‹(Sum$4) then getVal$Sum$4(obj,)›
//│   fun derive$Numeric$2 = (this,) => Numeric$2(0,)
//│   fun getNum$Numeric$2 = (this,) => let obj = this in if obj is ‹(Numeric$2(i,)) then i›
//│   fun derive$Variable$3 = (this,) => Numeric$2(1,)
//│   fun getVal$Mul$5 = (this,) => concat("(",)(concat(concat(concat(let obj = let obj = this in if obj is ‹(Mul$5(lhs, rhs,)) then lhs› in if obj is ‹(Mul$5) then getVal$Mul$5(obj,); (Variable$3) then getVal$Variable$3(obj,); (Pow$6) then getVal$Pow$6(obj,); (Numeric$2) then getVal$Numeric$2(obj,)›,)(" * ",),)(let obj = let obj = this in if obj is ‹(Mul$5(lhs, rhs,)) then rhs› in if obj is ‹(Mul$5) then getVal$Mul$5(obj,); (Pow$6) then getVal$Pow$6(obj,); (Numeric$2) then getVal$Numeric$2(obj,)›,),)(")",),)
//│   fun main$$8 = () => let obj = let obj = Pow$6(Variable$3("x",), Numeric$2(3,),) in if obj is ‹(Pow$6) then derive$Pow$6(obj,)› in if obj is ‹(Mul$5) then getVal$Mul$5(obj,)›
//│   fun main$$7 = () => let obj = let obj = Mul$5(Variable$3("x",), Numeric$2(3,),) in if obj is ‹(Mul$5) then derive$Mul$5(obj,)› in if obj is ‹(Sum$4) then getVal$Sum$4(obj,)›
//│   fun main$$6 = () => let obj = let obj = Sum$4(Variable$3("x",), Numeric$2(3,),) in if obj is ‹(Sum$4) then derive$Sum$4(obj,)› in if obj is ‹(Sum$4) then getVal$Sum$4(obj,)›
//│   fun getVal$Variable$3 = (this,) => let obj = this in if obj is ‹(Variable$3(nm,)) then nm›
//│   fun getVal$Numeric$2 = (this,) => toString(let obj = this in if obj is ‹(Numeric$2(i,)) then i›,)
//│   fun derive$Mul$5 = (this,) => Sum$4(Mul$5(let obj = let obj = this in if obj is ‹(Mul$5(lhs, rhs,)) then lhs› in if obj is ‹(Variable$3) then derive$Variable$3(obj,); (Pow$6) then derive$Pow$6(obj,)›, let obj = this in if obj is ‹(Mul$5(lhs, rhs,)) then rhs›,), Mul$5(let obj = this in if obj is ‹(Mul$5(lhs, rhs,)) then lhs›, let obj = let obj = this in if obj is ‹(Mul$5(lhs, rhs,)) then rhs› in if obj is ‹(Numeric$2) then derive$Numeric$2(obj,); (Pow$6) then derive$Pow$6(obj,)›,),)
//│   Code(List(main$$6()))
//│   Code(List(main$$7()))
//│   Code(List(main$$8()))
//│   Code(List(main$$9()))
//│ }
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ╟── field selection of type `Exp$1` does not match type `Mul$5 | Numeric$2 | Pow$6 | Variable$3`
//│ ║  l.25: 	class Mul(lhs: Exp, rhs: Exp) extends Exp {
//│ ║        	          ^^^
//│ ╟── but it flows into reference with expected type `Mul$5 | Numeric$2 | Pow$6 | Variable$3`
//│ ║  l.27: 	    fun getVal = concat("(")(concat(concat(concat(lhs.getVal)(" * "))(rhs.getVal))(")"))
//│ ╙──      	                                                  ^^^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ╟── field selection of type `Exp$1` does not match type `Mul$5 | Numeric$2 | Pow$6`
//│ ║  l.25: 	class Mul(lhs: Exp, rhs: Exp) extends Exp {
//│ ║        	                    ^^^
//│ ╟── but it flows into reference with expected type `Mul$5 | Numeric$2 | Pow$6`
//│ ║  l.27: 	    fun getVal = concat("(")(concat(concat(concat(lhs.getVal)(" * "))(rhs.getVal))(")"))
//│ ╙──      	                                                                      ^^^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ╟── field selection of type `Exp$1` does not match type `Mul$5 | Numeric$2`
//│ ║  l.21: 	class Sum(lhs: Exp, rhs: Exp) extends Exp {
//│ ║        	          ^^^
//│ ╟── but it flows into reference with expected type `Mul$5 | Numeric$2`
//│ ║  l.23: 	    fun getVal = concat("(")(concat(concat(concat(lhs.getVal)(" + "))(rhs.getVal))(")"))
//│ ╙──      	                                                  ^^^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ╟── field selection of type `Exp$1` does not match type `Mul$5 | Numeric$2`
//│ ║  l.21: 	class Sum(lhs: Exp, rhs: Exp) extends Exp {
//│ ║        	                    ^^^
//│ ╟── but it flows into reference with expected type `Mul$5 | Numeric$2`
//│ ║  l.23: 	    fun getVal = concat("(")(concat(concat(concat(lhs.getVal)(" + "))(rhs.getVal))(")"))
//│ ╙──      	                                                                      ^^^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ╟── field selection of type `Exp$1` is not an instance of type `Variable$3`
//│ ║  l.21: 	class Sum(lhs: Exp, rhs: Exp) extends Exp {
//│ ║        	          ^^^
//│ ╟── but it flows into reference with expected type `Variable$3`
//│ ║  l.22: 	    fun derive() = Sum(lhs.derive(), rhs.derive())
//│ ╙──      	                       ^^^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ╟── field selection of type `Exp$1` is not an instance of type `Numeric$2`
//│ ║  l.21: 	class Sum(lhs: Exp, rhs: Exp) extends Exp {
//│ ║        	                    ^^^
//│ ╟── but it flows into reference with expected type `Numeric$2`
//│ ║  l.22: 	    fun derive() = Sum(lhs.derive(), rhs.derive())
//│ ╙──      	                                     ^^^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ╟── field selection of type `Exp$1` does not match type `Pow$6 | Variable$3`
//│ ║  l.25: 	class Mul(lhs: Exp, rhs: Exp) extends Exp {
//│ ║        	          ^^^
//│ ╟── but it flows into reference with expected type `Pow$6 | Variable$3`
//│ ║  l.26: 	    fun derive() = Sum(Mul(lhs.derive(), rhs), Mul(lhs, rhs.derive()))
//│ ╙──      	                           ^^^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ╟── field selection of type `Exp$1` does not match type `Numeric$2 | Pow$6`
//│ ║  l.25: 	class Mul(lhs: Exp, rhs: Exp) extends Exp {
//│ ║        	                    ^^^
//│ ╟── but it flows into reference with expected type `Numeric$2 | Pow$6`
//│ ║  l.26: 	    fun derive() = Sum(Mul(lhs.derive(), rhs), Mul(lhs, rhs.derive()))
//│ ╙──      	                                                        ^^^
//│ class Numeric$2(i: Int) extends Exp$1
//│ class Pow$6(lhs: Variable$3, rhs: Numeric$2) extends Exp$1
//│ class Sum$4(lhs: Exp$1, rhs: Exp$1) extends Exp$1
//│ class Mul$5(lhs: Exp$1, rhs: Exp$1) extends Exp$1
//│ class Variable$3(nm: Str) extends Exp$1
//│ class Exp$1()
//│ fun getVal$Sum$4: Sum$4 -> Str
//│ fun derive$Pow$6: Pow$6 -> Mul$5
//│ fun getVal$Pow$6: Pow$6 -> Str
//│ fun derive$Sum$4: Sum$4 -> Sum$4
//│ fun main$$9: () -> Str
//│ fun derive$Numeric$2: anything -> Numeric$2
//│ fun getNum$Numeric$2: Numeric$2 -> Int
//│ fun derive$Variable$3: anything -> Numeric$2
//│ fun getVal$Mul$5: Mul$5 -> Str
//│ fun main$$8: () -> Str
//│ fun main$$7: () -> Str
//│ fun main$$6: () -> Str
//│ fun getVal$Variable$3: Variable$3 -> Str
//│ fun getVal$Numeric$2: Numeric$2 -> Str
//│ fun derive$Mul$5: Mul$5 -> Sum$4
//│ Str
//│ res
//│     = '(1 + 0)'
//│ res
//│     = '((1 * 3) + (x * 0))'
//│ res
//│     = '(3 * (x ^ 2))'
//│ res
//│     = '(((2 * (x ^ 1)) * (y ^ 2)) + ((x ^ 2) * (2 * (y ^ 1))))'
