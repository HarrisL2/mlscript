:NewDefs

:nm
class Exp() {
    virtual fun derive(): Exp
    virtual fun derive() = Exp()
}
class Numeric(i: Int) extends Exp {
    fun derive() = Numeric(0)
    fun getVal = i
}
class Variable(x: Str) extends Exp {
    fun derive() = Numeric(1)
}
Numeric(1).getVal
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Exp, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, derive, None, [], PolyType(List(),Function(Tuple(List()),TypeName(Exp)))), NuFunDef(None, derive, None, [], Lam(Tup(), App(Var(Exp), Tup()))))), NuTypeDef(class, Numeric, (), Tup(i: Var(Int)), (Var(Exp)), None, None, TypingUnit(NuFunDef(None, derive, None, [], Lam(Tup(), App(Var(Numeric), Tup(_: IntLit(0))))), NuFunDef(None, getVal, None, [], Var(i)))), NuTypeDef(class, Variable, (), Tup(x: Var(Str)), (Var(Exp)), None, None, TypingUnit(NuFunDef(None, derive, None, [], Lam(Tup(), App(Var(Numeric), Tup(_: IntLit(1))))))), Sel(App(Var(Numeric), Tup(_: IntLit(1))), getVal))
//│ Lifted:
//│ TypingUnit(NuTypeDef(class, Exp$1, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, derive, None, [], PolyType(List(),Function(Tuple(List()),TypeName(Exp$1)))), NuFunDef(None, derive, None, [], Lam(Tup(), App(Var(Exp$1), Tup()))))), NuTypeDef(class, Numeric$2, (), Tup(i: Var(Int)), (App(Var(Exp$1), Tup())), None, None, TypingUnit(NuFunDef(None, derive, None, [], Lam(Tup(), App(Var(Numeric$2), Tup(_: IntLit(0))))), NuFunDef(None, getVal, None, [], Sel(Var(this), i)))), NuTypeDef(class, Variable$3, (), Tup(x: Var(Str)), (App(Var(Exp$1), Tup())), None, None, TypingUnit(NuFunDef(None, derive, None, [], Lam(Tup(), App(Var(Numeric$2), Tup(_: IntLit(1))))))), Sel(App(Var(Numeric$2), Tup(_: IntLit(1))), getVal))
//│ TypingUnit {
//│   class Exp$1([]) {fun derive = () -> Exp$1; fun derive = () => Exp$1()}
//│   class Numeric$2([i: Int,]): Exp$1() {fun derive = () => Numeric$2(0,); fun getVal = (this).i}
//│   class Variable$3([x: Str,]): Exp$1() {fun derive = () => Numeric$2(1,)}
//│   Code(List((Numeric$2(1,)).getVal))
//│ }
//│ Mono:
//│ TypingUnit(NuTypeDef(class, Numeric$2, (), Tup(i: Var(Int)), (App(Var(Exp$1), Tup())), None, None, TypingUnit()), NuTypeDef(class, Variable$3, (), Tup(x: Var(Str)), (App(Var(Exp$1), Tup())), None, None, TypingUnit()), NuTypeDef(class, Exp$1, (), Tup(), (), None, None, TypingUnit()), NuFunDef(None, getVal$Numeric$2, None, [], Lam(Tup(_: Var(this)), Blk(NuFunDef(Some(false), obj, None, [], Var(this)); If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(Numeric$2), IntLit(1)))), None)))), NuFunDef(None, main$$3, None, [], Lam(Tup(), Blk(NuFunDef(Some(false), obj, None, [], App(Var(Numeric$2), Tup(_: IntLit(1)))); If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(Numeric$2), App(Var(getVal$Numeric$2), Tup(_: Var(obj)))))), None)))), App(Var(main$$3), Tup()))
//│ TypingUnit {
//│   class Numeric$2([i: Int,]): Exp$1() {}
//│   class Variable$3([x: Str,]): Exp$1() {}
//│   class Exp$1([]) {}
//│   fun getVal$Numeric$2 = (this,) => {let obj = this; if obj is ‹(Numeric$2) then 1›}
//│   fun main$$3 = () => {let obj = Numeric$2(1,); if obj is ‹(Numeric$2) then getVal$Numeric$2(obj,)›}
//│   Code(List(main$$3()))
//│ }
//│ class Numeric$2(i: Int) extends Exp$1
//│ class Variable$3(x: Str) extends Exp$1
//│ class Exp$1()
//│ fun getVal$Numeric$2: Numeric$2 -> 1
//│ fun main$$3: () -> 1
//│ 1
//│ res
//│     = 1
