:NewDefs

:nm
class Foo() {fun f = 0}
module x { val y = Foo() }
x.y.f
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Foo, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, f, None, [], IntLit(0)))), NuTypeDef(module, x, (), Tup(), (), None, None, TypingUnit(NuFunDef(Some(false), y, None, [], App(Var(Foo), Tup())))), Sel(Sel(Var(x), y), f))
//│ Lifted:
//│ TypingUnit(NuTypeDef(class, Foo$1, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, f, None, [], IntLit(0)))), NuTypeDef(module, x$2, (), Tup(), (), None, None, TypingUnit(NuFunDef(Some(false), y, None, [], App(Var(Foo$1), Tup())))), Sel(Sel(App(Var(x$2), Tup()), y), f))
//│ TypingUnit {
//│   class Foo$1([]) {fun f = 0}
//│   module x$2([]) {let y = Foo$1()}
//│   Code(List(((x$2()).y).f))
//│ }
//│ Mono:
//│ TypingUnit(NuTypeDef(module, x$2, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, Foo$1, (), Tup(), (), None, None, TypingUnit()), NuFunDef(Some(false), y$x$2, None, [], Lam(Tup(_: Var(this)), App(Var(Foo$1), Tup()))), NuFunDef(None, f$Foo$1, None, [], Lam(Tup(_: Var(this)), IntLit(0))), NuFunDef(None, main$$2, None, [], Lam(Tup(), Blk(NuFunDef(Some(false), obj, None, [], Blk(NuFunDef(Some(false), obj, None, [], App(Var(x$2), Tup())); If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(x$2), App(Var(y$x$2), Tup(_: Var(obj)))))), None))); If(IfOpApp(Var(obj), Var(is), IfBlock(IfThen(Var(Foo$1), App(Var(f$Foo$1), Tup(_: Var(obj)))))), None)))), App(Var(main$$2), Tup()))
//│ TypingUnit {
//│   module x$2([]) {}
//│   class Foo$1([]) {}
//│   let y$x$2 = (this,) => Foo$1()
//│   fun f$Foo$1 = (this,) => 0
//│   fun main$$2 = () => {let obj = {let obj = x$2(); if obj is ‹(x$2) then y$x$2(obj,)›}; if obj is ‹(Foo$1) then f$Foo$1(obj,)›}
//│   Code(List(main$$2()))
//│ }
//│ ╔══[ERROR] Module parameters are not supported
//│ ╙──
//│ ╔══[ERROR] Parameterized modules are not yet supported
//│ ╙──
//│ module x$2()
//│ class Foo$1()
//│ let y$x$2: anything -> Foo$1
//│ fun f$Foo$1: anything -> 0
//│ fun main$$2: () -> 0
//│ 0
//│ y$x$2
//│       = [Function: y$x$21]
//│ res
//│ Runtime error:
//│   TypeError: x$2 is not a function
